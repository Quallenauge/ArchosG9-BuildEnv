#!/bin/bash

export BUILD_PWD=`pwd`

export CYANOGEN_BASE_PATH=$BUILD_PWD/cm-10.2
export CYANOGEN_PRODUCT_PATH=$CYANOGEN_BASE_PATH/out/target/product/archos_g9

export DESTINATION_PATH=$BUILD_PWD/archos_image


echo "Build PWD: $BUILD_PWD"

function callRepo
{
   shift
   echo "Calling repo command in repository: $CYANOGEN_BASE_PATH with params: $*"
   cd $CYANOGEN_BASE_PATH
   repo $*
   cd $BUILD_PWD
}

function inject
{
  echo "Injecting propritary files for archos device..."
  cp -rpv $BUILD_PWD/android_injection/* $CYANOGEN_BASE_PATH/
}

function buildImage
{
echo "Mounting base image..."
sudo mount $DESTINATION_PATH/archos.ext4.update $DESTINATION_PATH/mount/

echo "Clear image..."
sudo rm -rf $DESTINATION_PATH/mount/*

echo "Extracting base image"
sudo tar xfj archos_base_image.tar.bz2 -C $DESTINATION_PATH/mount/

echo "Copy root folder from cyanogen mod..."
sudo cp -rf $CYANOGEN_PRODUCT_PATH/root/* $DESTINATION_PATH/mount/

echo "Copy system folder from cyanogen mod..."
sudo cp -rf $CYANOGEN_PRODUCT_PATH/system $DESTINATION_PATH/mount/

echo "Copy gapps package..."
sudo cp -rf $DESTINATION_PATH/gapps/system $DESTINATION_PATH/mount/

# Not needed anymore
#echo "Copy hwcomposer.so ..."
#sudo cp $CYANOGEN_BASE_PATH/device/archos/archos_g9/prebuilt/system/vendor/lib/hw/hwcomposer.omap4.so $DESTINATION_PATH/mount/system/vendor/lib/hw/hwcomposer.omap4.so

echo "Copy init.rc and ueventd.rc ..."
#sudo cp $CYANOGEN_BASE_PATH/device/archos/archos_g9/prebuilt/root/init.rc $DESTINATION_PATH/mount/init.rc
sudo cp $CYANOGEN_BASE_PATH/device/archos/archos_g9/prebuilt/root/ueventd.rc $DESTINATION_PATH/mount/ueventd.rc

echo "Copy builded sgx module ..."
sudo cp $CYANOGEN_BASE_PATH/out/target/product/archos_g9/target/pvrsrvkm_sgx540_120.ko $DESTINATION_PATH/mount/system/lib/modules/pvrsrvkm_sgx540_120.ko

echo "Symlinking gralloc library ..."
sudo ln -s gralloc.omap4430.so $DESTINATION_PATH/mount/system/vendor/lib/hw/gralloc.archos.so

echo "Set permissions for su"
sudo chown 0:0 $DESTINATION_PATH/mount/system/xbin/su
sudo chmod 6755 $DESTINATION_PATH/mount/system/xbin/su

#echo "Workaround for libedid.so because it crashes the hwcomposer. /system/lib/libedid.so is renamed into /system/lib/libedid.so.bak"
#sudo mv $DESTINATION_PATH/mount/system/lib/libedid.so $DESTINATION_PATH/mount/system/lib/libedid.so.bak

#echo "Workaround for camera.omap4.so because it crashes the hwcomposer. /system/lib/hw/camera.omap4.so is renamed into /system/lib/hw/camera.omap4.so.bak"
#sudo mv $DESTINATION_PATH/mount/system/lib/hw/camera.omap4.so $DESTINATION_PATH/mount/system/lib/hw/camera.omap4.so.bak

echo "Unmounting base image..."
sudo umount $DESTINATION_PATH/mount

echo "Archos image is at the following position:"
echo "$DESTINATION_PATH/archos.ext4.update"
echo "If you want to mount it use:"
echo "sudo mount $DESTINATION_PATH/archos.ext4.update $DESTINATION_PATH/mount/"
echo "If you want to transfer it to archos device use:"
echo "adb push $DESTINATION_PATH/archos.ext4.update /data/media/ && adb reboot"
}

function makeProject
{
    echo "$CYANOGEN_BASE_PATH: Rebuilding bionic headers, based from external/kernel-headers package"
    cd $CYANOGEN_BASE_PATH

    ./bionic/libc/kernel/tools/update_all.py

    inject

    if [ $1 == "clean" ]; then
	echo "Cleaning target output folder..."
	rm -rf out/target
    fi

    echo "Now building the project..."
    . build/envsetup.sh && lunch cm_archos_g9-userdebug && make -j12 ${@:2}
    cd $BUILD_PWD
}

function cleanGitRepos
{
    callRepo repo forall -c git reset --hard
    callRepo repo forall -c git clean -fd
    $CYANOGEN_BASE_PATH/vendor/cm/get-prebuilts
}

function prepareLinaroToolChain
{
    TAR_FILE=android-toolchain-eabi-linaro-4.7-2013.03-2-2013-03-17_20-47-57-linux-x86.tar.bz2
    cd $CYANOGEN_BASE_PATH
    wget -c https://releases.linaro.org/13.03/components/android/toolchain/4.7/$TAR_FILE
    cd $CYANOGEN_BASE_PATH/prebuilts/gcc/linux-x86/arm
    tar -xvjf ../../../../$TAR_FILE
    if [ -e linaro-4.7 ]; then
	rm -rf linaro-4.7
    fi
    mv android-toolchain-eabi linaro-4.7
}

case "$1" in
"repo")
	callRepo $*
;;
"buildImage")
	buildImage
;;
"make")
	makeProject dummyArg ${@:2}
;;
"makeFull")
	makeProject clean ${@:2}
;;
"reset")
	cleanGitRepos
;;
"inject")
	inject
;;
"prepareLinaro")
	prepareLinaroToolChain
;;
*)
	echo "Command $1 not supported"
;;
esac
