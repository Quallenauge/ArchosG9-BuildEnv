#!/bin/bash

#exit on first error
set -e

export BUILD_PWD=`pwd`

export CYANOGEN_BASE_PATH=$BUILD_PWD/cm-11.0
export CYANOGEN_PRODUCT_PATH=$CYANOGEN_BASE_PATH/out/target/product/archos_g9

export DESTINATION_PATH=$BUILD_PWD/archos_image


echo "Build PWD: $BUILD_PWD"

function callRepo
{
   shift
   echo "Calling repo command in repository: $CYANOGEN_BASE_PATH with params: $*"
   cd $CYANOGEN_BASE_PATH
   repo $*
   cd $BUILD_PWD
}

function inject
{
  echo "Injecting propritary files for archos device..."
  cp -rpv $BUILD_PWD/android_injection/* $CYANOGEN_BASE_PATH/
}

function buildImage
{
echo "Mounting base image..."
sudo mount $DESTINATION_PATH/archos.ext4.update $DESTINATION_PATH/mount/

echo "Clear image..."
sudo rm -rf $DESTINATION_PATH/mount/*

echo "Extracting base image"
sudo tar xfj archos_base_image.tar.bz2 -C $DESTINATION_PATH/mount/

# Base image has an tmp folder. I'm too lazy to change the image and upload a new one...so modify does also the trick.
if [ -e $DESTINATION_PATH/mount/tmp ];
then
  sudo rm -rf $DESTINATION_PATH/mount/tmp
fi

echo "Copy root folder from cyanogen mod..."
sudo cp -rf $CYANOGEN_PRODUCT_PATH/root/* $DESTINATION_PATH/mount/

echo "Copy system folder from cyanogen mod..."
sudo cp -rf $CYANOGEN_PRODUCT_PATH/system $DESTINATION_PATH/mount/

echo "Copy gapps package..."
sudo cp -rf $DESTINATION_PATH/gapps/system $DESTINATION_PATH/mount/

echo "Copy init.rc and ueventd.rc ..."
sudo cp $CYANOGEN_BASE_PATH/device/archos/archos_g9/prebuilt/root/ueventd.rc $DESTINATION_PATH/mount/ueventd.rc

echo "Copy build sgx module ..."
sudo cp $CYANOGEN_BASE_PATH/out/target/product/archos_g9/target/pvrsrvkm_sgx540_120.ko $DESTINATION_PATH/mount/system/lib/modules/pvrsrvkm_sgx540_120.ko

echo "Symlinking gralloc library ..."
sudo ln -s gralloc.omap4430.so $DESTINATION_PATH/mount/system/vendor/lib/hw/gralloc.archos.so

sudo chmod 0755 $DESTINATION_PATH/mount/system/vendor/bin/*

echo "Set permissions for su"
echo "Avoiding the suid bit - this doesn't work on Android 4.3..."
sudo chown 0:0 $DESTINATION_PATH/mount/system/xbin/su
sudo chmod 06755 $DESTINATION_PATH/mount/system/bin/su
sudo chown 0:0 $DESTINATION_PATH/mount/system/bin/su
sudo chmod 0755 $DESTINATION_PATH/mount/system/bin/su

echo "Removing sgx544 libraries"
sudo find $DESTINATION_PATH/mount/system/vendor/lib/ -name "*544*" -exec rm {} +

echo "Correcting permission for initd and compcache binaries"
#sudo chmod 0755 $DESTINATION_PATH/mount/system/bin/handle_compcache
#sudo chmod 0755 $DESTINATION_PATH/mount/system/bin/compcache
sudo chmod 0755 $DESTINATION_PATH/mount/system/bin/sysinit

echo "Unmounting base image..."
sudo umount $DESTINATION_PATH/mount

echo "Archos image is at the following position:"
echo "$DESTINATION_PATH/archos.ext4.update"
echo "If you want to mount it use:"
echo "sudo mount $DESTINATION_PATH/archos.ext4.update $DESTINATION_PATH/mount/"
echo "If you want to transfer it to archos device use:"
echo "adb push $DESTINATION_PATH/archos.ext4.update /data/media/ && adb reboot"
}

function makeProject
{
    echo "$CYANOGEN_BASE_PATH: Rebuilding bionic headers, based from external/kernel-headers package"
    cd $CYANOGEN_BASE_PATH

    if [ $1 != "nobionic" ]; then
	echo "Update bionic kernel headers..."
	./bionic/libc/kernel/tools/update_all.py
    fi

    inject

    if [ $1 == "clean" ]; then
	echo "Cleaning target output folder..."
	rm -rf out/target
    fi

    echo "Now building the project..."
    . build/envsetup.sh && lunch cm_archos_g9-userdebug && mka update-api && mka ${@:2}
    cd $BUILD_PWD
}

function cleanGitRepos
{
    callRepo repo forall -c git reset --hard
    callRepo repo forall -c git clean -fd
    $CYANOGEN_BASE_PATH/vendor/cm/get-prebuilts
}

function prepareLinaroToolChain
{
    TAR_FILE=android-toolchain-eabi-linaro-4.7-2013.03-2-2013-03-17_20-47-57-linux-x86.tar.bz2
    cd $CYANOGEN_BASE_PATH
    wget -c https://releases.linaro.org/13.03/components/android/toolchain/4.7/$TAR_FILE
    cd $CYANOGEN_BASE_PATH/prebuilts/gcc/linux-x86/arm
    tar -xvjf ../../../../$TAR_FILE
    if [ -e linaro-4.7 ]; then
	rm -rf linaro-4.7
    fi
    mv android-toolchain-eabi linaro-4.7
}

function applyCherryPicks
{
    echo "Performing cherry-picks..."
    # SoftapControllerTI: update parameters for setSoftap
    # http://review.cyanogenmod.org/#/c/55805/
#    cd $CYANOGEN_BASE_PATH/system/netd
#    git fetch http://review.cyanogenmod.org/CyanogenMod/android_system_netd refs/changes/05/55805/2 && git cherry-pick FETCH_HEAD
}

case "$1" in
"repo")
	callRepo $*
;;
"buildImage")
	buildImage
;;
"make")
	makeProject dummyArg ${@:2}
;;
"makeLight")
	makeProject nobionic ${@:2}
;;

"makeFull")
	makeProject clean ${@:2}
;;
"reset")
	cleanGitRepos
;;
"inject")
	inject
;;
"prepareLinaro")
	prepareLinaroToolChain
;;
"sync")
  echo "Perform an inject to ensure that changes are not overwritten..."
  if [ $# -eq 1 ];then
    inject
  fi

  dateStr=`date +"%d_%m_%Y-%H_%M_%S"`
  LAST_REV_FILE=$BUILD_PWD/lastRevs.txt
  cd $CYANOGEN_BASE_PATH
  if [ -e $LAST_REV_FILE ]; then
    echo "Last sync wasn't successful...using last revisions"
  else
    echo "Creating new revision file"
    repo forall -c 'echo "`pwd`|`git rev-parse HEAD`"' >$LAST_REV_FILE
  fi
  echo "Updating repo...."
  cd $CYANOGEN_PRODUCT_PATH
  repo sync
  if [ 0 == $? ]; then
    echo "Sync was successful...creating changelog now"
    OUT_FILE=$BUILD_PWD/Changes_$dateStr.txt
    set -e

    echo "" >$OUT_FILE

    while read line; do
      #echo "$line"
      FOLDER=`echo $line | cut -d'|' -f1`
      HASH=`echo $line | cut -d'|' -f2`

      #echo "Folder=$FOLDER"
      #echo "Hash=$HASH"
      cd $FOLDER
      echo "Checking $FOLDER"
#     if [ `git rev-list --max-count=2 --all | wc -l` -eq 1 ]; then
#       echo "Skipping repo, because only one commit available"
#       continue
#     fi
      NEW_HASH=`git rev-parse HEAD`
      if [ "$NEW_HASH" != "$HASH" ]; then
        echo "Folder $FOLDER has changed... $NEW_HASH != $HASH"
        echo "-----------------------------------------------------------------" >>$OUT_FILE
        echo "$FOLDER $HASH..$NEW_HASH" >>$OUT_FILE
        git log $HASH..$NEW_HASH >>$OUT_FILE
        #git log $NEW_HASH..$HASH >>$OUT_FILE
      fi
    done < $LAST_REV_FILE
  fi
  echo "Backup last revision file..."
  mv $LAST_REV_FILE "$LAST_REV_FILE"_"$dateStr"
  cd $BUILD_PWD

  echo "Apply cherry picks..."
  applyCherryPicks  

;;
"release")
	makeProject dummyArg ${@:2} 2>&1 | tee build.log
	buildImage
	dateStr=`date +"%d_%m_%Y-%H_%M_%S"`
	RELEASE_DIR_PATH=$BUILD_PWD/releases/$dateStr
	mkdir $RELEASE_DIR_PATH
	mkdir $RELEASE_DIR_PATH/revisions

	cp $DESTINATION_PATH/archos.ext4.update $RELEASE_DIR_PATH/
	cp $CYANOGEN_PRODUCT_PATH/kernel $RELEASE_DIR_PATH/zImage
	cp initramfs.cpio.lzo $RELEASE_DIR_PATH/initramfs.cpio.lzo

	git rev-parse HEAD >$RELEASE_DIR_PATH/revisions/rev_buildRepo.txt
	callRepo repo manifest -o "$RELEASE_DIR_PATH/revisions/manifest.xml" -r
	cd android_injection
	git rev-parse HEAD >$RELEASE_DIR_PATH/revisions/rev_android_injection.txt
;;
"cherryPicks")
	applyCherryPicks
;;
*)
	echo "Command $1 not supported"
;;
esac
